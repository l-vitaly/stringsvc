// Code generated by protoc-gen-go.
// source: service.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	UppercaseRequest
	UppercaseResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UppercaseRequest struct {
	S string `protobuf:"bytes,1,opt,name=s" json:"s,omitempty"`
}

func (m *UppercaseRequest) Reset()                    { *m = UppercaseRequest{} }
func (m *UppercaseRequest) String() string            { return proto.CompactTextString(m) }
func (*UppercaseRequest) ProtoMessage()               {}
func (*UppercaseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type UppercaseResponse struct {
	V   string `protobuf:"bytes,1,opt,name=v" json:"v,omitempty"`
	Err string `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *UppercaseResponse) Reset()                    { *m = UppercaseResponse{} }
func (m *UppercaseResponse) String() string            { return proto.CompactTextString(m) }
func (*UppercaseResponse) ProtoMessage()               {}
func (*UppercaseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*UppercaseRequest)(nil), "pb.UppercaseRequest")
	proto.RegisterType((*UppercaseResponse)(nil), "pb.UppercaseResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for String service

type StringClient interface {
	Uppercase(ctx context.Context, in *UppercaseRequest, opts ...grpc.CallOption) (*UppercaseResponse, error)
}

type stringClient struct {
	cc *grpc.ClientConn
}

func NewStringClient(cc *grpc.ClientConn) StringClient {
	return &stringClient{cc}
}

func (c *stringClient) Uppercase(ctx context.Context, in *UppercaseRequest, opts ...grpc.CallOption) (*UppercaseResponse, error) {
	out := new(UppercaseResponse)
	err := grpc.Invoke(ctx, "/pb.String/Uppercase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for String service

type StringServer interface {
	Uppercase(context.Context, *UppercaseRequest) (*UppercaseResponse, error)
}

func RegisterStringServer(s *grpc.Server, srv StringServer) {
	s.RegisterService(&_String_serviceDesc, srv)
}

func _String_Uppercase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UppercaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringServer).Uppercase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.String/Uppercase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringServer).Uppercase(ctx, req.(*UppercaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _String_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.String",
	HandlerType: (*StringServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Uppercase",
			Handler:    _String_Uppercase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 145 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x52, 0xe0,
	0x12, 0x08, 0x2d, 0x28, 0x48, 0x2d, 0x4a, 0x4e, 0x2c, 0x4e, 0x0d, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d,
	0x2e, 0x11, 0xe2, 0xe1, 0x62, 0x2c, 0x96, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x62, 0x2c, 0x56,
	0x32, 0xe6, 0x12, 0x44, 0x52, 0x51, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x0a, 0x52, 0x52, 0x06, 0x53,
	0x52, 0x26, 0x24, 0xc0, 0xc5, 0x9c, 0x5a, 0x54, 0x24, 0xc1, 0x04, 0xe6, 0x83, 0x98, 0x46, 0x2e,
	0x5c, 0x6c, 0xc1, 0x25, 0x45, 0x99, 0x79, 0xe9, 0x42, 0x56, 0x5c, 0x9c, 0x70, 0xed, 0x42, 0x22,
	0x7a, 0x05, 0x49, 0x7a, 0xe8, 0xf6, 0x49, 0x89, 0xa2, 0x89, 0x42, 0xec, 0x50, 0x62, 0x48, 0x62,
	0x03, 0xbb, 0xd3, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x0e, 0x07, 0xbc, 0xe6, 0xb8, 0x00, 0x00,
	0x00,
}
